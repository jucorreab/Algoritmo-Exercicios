import math

def multiplicar_matrizes(A, B):
    return [
        [
            sum(A[i][k] * B[k][j] for k in range(len(B)))
            for j in range(len(B[0]))
        ]
        for i in range(len(A))
    ]

def transpor_matriz(m):
    return [[m[j][i] for j in range(len(m))] for i in range(len(m[0]))]

def calcular_autovalores_e_autovetores(m):
    n = len(m)
    autovalores = []
    autovetores = []

    matriz_residual = [linha[:] for linha in m]

    for _ in range(n):
        v = [1.0] * n
        for _ in range(100):  
            w = [sum(matriz_residual[i][j] * v[j] for j in range(n)) for i in range(n)]
            norma = math.sqrt(sum(x**2 for x in w))
            v = [x / norma for x in w]

        lambda_autovalor = sum(
            sum(matriz_residual[i][j] * v[j] for j in range(n)) * v[i] for i in range(n)
        )
        autovalores.append(lambda_autovalor)
        autovetores.append(v)

        for i in range(n):
            for j in range(n):
                matriz_residual[i][j] -= lambda_autovalor * v[i] * v[j]

    return autovalores, autovetores

def exibir_resultados(m):
    print("Matriz original:")
    for linha in m:
        print([round(x, 2) for x in linha])

    autovalores, autovetores = calcular_autovalores_e_autovetores(m)
    print("\nAutovalores:")
    print([round(x, 2) for x in autovalores])

    print("\nAutovetores:")
    for vetor in autovetores:
        print([round(x, 2) for x in vetor])

    D = [[0 if i != j else autovalores[i] for j in range(len(autovalores))] for i in range(len(autovalores))]
    print("\nMatriz diagonal (D):")
    for linha in D:
        print([round(x, 2) for x in linha])

    P = transpor_matriz(autovetores)
    print("\nMatriz de autovetores (P):")
    for linha in P:
        print([round(x, 2) for x in linha])

    P_inv = inversa_4x4(P)
    A_reconstituida = multiplicar_matrizes(multiplicar_matrizes(P, D), P_inv)

    print("\nVerificação (A reconstruída):")
    for linha in A_reconstituida:
      print([round(x) for x in linha]) 

def determinante_4x4(m):
    def determinante_3x3(m):
        return (m[0][0] * (m[1][1] * m[2][2] - m[1][2] * m[2][1])
                - m[0][1] * (m[1][0] * m[2][2] - m[1][2] * m[2][0])
                + m[0][2] * (m[1][0] * m[2][1] - m[1][1] * m[2][0]))

    det = 0
    for i in range(4):
        sub_matriz = [[m[j][k] for k in range(4) if k != i] for j in range(1, 4)]
        cofactor = (-1) ** i * m[0][i] * determinante_3x3(sub_matriz)
        det += cofactor
    return det

def adjunta_4x4(m):
    def determinante_3x3(m):
        return (m[0][0] * (m[1][1] * m[2][2] - m[1][2] * m[2][1])
                - m[0][1] * (m[1][0] * m[2][2] - m[1][2] * m[2][0])
                + m[0][2] * (m[1][0] * m[2][1] - m[1][1] * m[2][0]))

    adj = []
    for i in range(4):
        adj_linha = []
        for j in range(4):
            sub_matriz = [[m[y][x] for x in range(4) if x != j] for y in range(4) if y != i]
            cofactor = (-1) ** (i + j) * determinante_3x3(sub_matriz)
            adj_linha.append(cofactor)
        adj.append(adj_linha)
    return transpor_matriz(adj)

def inversa_4x4(m):
    det = determinante_4x4(m)
    adj = adjunta_4x4(m)
    return [[adj[i][j] / det for j in range(4)] for i in range(4)]

matriz_exemplo = [
    [5, 4, 2, 1],
    [4, 5, 3, 2],
    [2, 3, 5, 4],
    [1, 2, 4, 5]
]

exibir_resultados(matriz_exemplo)
